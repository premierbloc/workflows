name: Terraform

on:
  workflow_call:
    inputs:
      apply:
        default: true
        required: false
        type: boolean
      arguments:
        required: false
        type: string
      artifact:
        required: false
        type: string
      destroy:
        default: false
        required: false
        type: boolean
      environment:
        required: false
        type: string
      region:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_S3_BUCKET:
        required: true
      GITHUB_TOKEN:
        required: true
      TF_API_TOKEN:
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Download all workflow run artifacts
        if: inputs.artifact != null
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact }}
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Check terraform configuration files format
        run: terraform fmt -check

      - name: Initialize terraform
        run: |
          terraform init \
          -backend-config="bucket=${{ secrets.AWS_S3_BUCKET }}" \
          -backend-config="key=${GITHUB_REPOSITORY}" \
          -backend-config="region=${AWS_DEFAULT_REGION}"

      - name: Validate terraform configuration files
        run: terraform validate -no-color

      - name: Retrieve workspace (environment)
        id: retrieve
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          ref=$(echo ${GITHUB_HEAD_REF:-$GITHUB_REF} | sed -e 's#refs/heads/##')
          case $ref in
              refs/tags/*   ) workspace=production ;;
              main          ) workspace=stage ;;
              *             ) workspace=$(echo $ref | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          esac

          echo "::set-output name=workspace::${ENVIRONMENT:-$workspace}"

      - name: Create and/or select terraform workspace
        run: |
          terraform workspace new ${{ steps.retrieve.outputs.workspace }} || true
          terraform workspace select ${{ steps.retrieve.outputs.workspace }}

      - name: Generate terraform plan
        if: inputs.destroy != true
        env:
          TF_CLI_ARGS: ${{ inputs.arguments }}
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Generate terraform plan (destroy)
        if: inputs.destroy
        env:
          TF_CLI_ARGS: ${{ inputs.arguments }}
        run: terraform plan -input=false -no-color -destroy -out=tfplan

      - name: Apply terraform plan
        if: inputs.apply
        run: terraform apply -auto-approve -input=false -no-color tfplan

      - name: Delete terraform workspace
        if: inputs.destroy
        run: |
          terraform workspace select default
          terraform workspace delete ${{ steps.retrieve.outputs.workspace }}
