name: Reusable workflow example

on:
  workflow_call:
    inputs:
      destroy:
        default: false
        required: true
        type: boolean
      region:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_S3_BUCKET:
        required: true
      TF_API_TOKEN:
        required: true

jobs:
  example:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Retrieve application, environment and tag
        id: retrieve
        run: |
          case $GITHUB_REF in
              refs/tags/*        ) environment=production ;;
              refs/heads/main    ) environment=stage ;;
              refs/pull/*        ) environment=pullrequest-$(dirname $GITHUB_REF_NAME) ;;
              *                  ) environment=$(echo $GITHUB_REF | cut -d "/" -f3- | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          esac

          echo "::set-output name=environment::$environment"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Check terraform configuration files format
        run: terraform fmt -check

      - name: Initialize terraform
        env:
          BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          terraform init \
          -backend-config="bucket=${BUCKET}" \
          -backend-config="key=${GITHUB_REPOSITORY}" \
          -backend-config="region=${AWS_DEFAULT_REGION}"

      - name: Validate terraform configuration files
        run: terraform validate -no-color

      - name: Create and/or select terraform workspace
        env:
          WORKSPACE: ${{ steps.retrieve.outputs.environment }}
        run: |
          terraform workspace new $WORKSPACE | true
          terraform workspace select $WORKSPACE

      - name: Generate terraform plan
        if: inputs.destroy != true
        run: terraform plan -no-color -out=tfplan

      # - name: Generate terraform destroy plan (on pull request closure)
      #   if: github.event_name == 'pull_request' && github.event.action == 'closed'
      #   run: terraform plan -no-color -destroy -out=tfplan

      # - name: Apply terraform plan
      #   run: terraform apply -auto-approve tfplan

      # - name: Delete terraform workspace (on pull request closure)
      #   if: github.event_name == 'pull_request' && github.event.action == 'closed'
      #   env:
      #     NAME: ${{ steps.setup.outputs.environment }}
      #   run: |
      #     terraform workspace select default
      #     terraform workspace delete $NAME
